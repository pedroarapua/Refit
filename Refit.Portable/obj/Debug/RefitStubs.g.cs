﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace Refit.Portable
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIUserService : IUserService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIUserService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<List<User>> FindAll(int groupId,string sortOrder)
        {
            var arguments = new object[] { groupId,sortOrder };
            return (Task<List<User>>) methodImpls["FindAll"](Client, arguments);
        }

    }
}

namespace Refit.Portable
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIApiService<T, TKey> : IApiService<T, TKey>
        where T : class
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIApiService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<T> Create(T payload)
        {
            var arguments = new object[] { payload };
            return (Task<T>) methodImpls["Create"](Client, arguments);
        }

        public virtual Task<List<T>> FindAll()
        {
            var arguments = new object[] {  };
            return (Task<List<T>>) methodImpls["FindAll"](Client, arguments);
        }

        public virtual Task<T> FindOne(TKey key)
        {
            var arguments = new object[] { key };
            return (Task<T>) methodImpls["FindOne"](Client, arguments);
        }

        public virtual Task Update(TKey key,T payload)
        {
            var arguments = new object[] { key,payload };
            return (Task) methodImpls["Update"](Client, arguments);
        }

        public virtual Task Delete(TKey key)
        {
            var arguments = new object[] { key };
            return (Task) methodImpls["Delete"](Client, arguments);
        }

    }
}
